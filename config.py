import random

random_device = False

request_device_info = [
    {
        'device_name':'Edge Server',
        'computing_intensity':[282, 698, 280, 282, 698, 280, 282, 698, 280, 282, 698, 280, 282, 698, 280], # AlexNet, GoogLeNet, ResNet-50
        'computing_frequency':3.6 * (10**12),
        'memory':24 * 1024 * 1024 * 1024, # Byte
        'max_energy':300,
        'cur_energy':300,
        'min_energy_consumption':80,
        'max_energy_consumption':200,
        'is_request_device':True,
    },
    {
        'device_name':'Edge Server',
        'computing_intensity':[282, 698, 280, 282, 698, 280, 282, 698, 280, 282, 698, 280, 282, 698, 280], # AlexNet, GoogLeNet, ResNet-50
        'computing_frequency':3.6 * (10**12),
        'memory':24 * 1024 * 1024 * 1024, # Byte
        'max_energy':300,
        'cur_energy':300,
        'min_energy_consumption':80,
        'max_energy_consumption':200,
        'is_request_device':True,
    },
    {
        'device_name':'Edge Server',
        'computing_intensity':[282, 698, 280, 282, 698, 280, 282, 698, 280, 282, 698, 280, 282, 698, 280], # AlexNet, GoogLeNet, ResNet-50
        'computing_frequency':3.6 * (10**12),
        'memory':24 * 1024 * 1024 * 1024, # Byte
        'max_energy':300,
        'cur_energy':300,
        'min_energy_consumption':80,
        'max_energy_consumption':200,
        'is_request_device':True,
    },
    {
        'device_name':'Edge Server',
        'computing_intensity':[282, 698, 280, 282, 698, 280, 282, 698, 280, 282, 698, 280, 282, 698, 280], # AlexNet, GoogLeNet, ResNet-50
        'computing_frequency':3.6 * (10**12),
        'memory':24 * 1024 * 1024 * 1024, # Byte
        'max_energy':300,
        'cur_energy':300,
        'min_energy_consumption':80,
        'max_energy_consumption':200,
        'is_request_device':True,
    },
]

local_device_info = [
    # {
    #     'device_name':'Raspberry Pi 4B',
    #     'computing_intensity':[615, 1568, 600, 615, 1568, 600, 615, 1568, 600, 615, 1568, 600, 615, 1568, 600], # AlexNet, GoogLeNet, ResNet-50
    #     'computing_frequency':1.5 * (10**12),
    #     'memory':2 * 1024 * 1024 * 1024, # Byte
    #     'max_energy':20,
    #     'cur_energy':20,
    #     'min_energy_consumption':5,
    #     'max_energy_consumption':10,
    #     'is_request_device':False,
    # },
    # {
    #     'device_name':'Jetson TX2',
    #     'computing_intensity':[301, 772, 300, 301, 772, 300, 301, 772, 300, 301, 772, 300, 301, 772, 300], # AlexNet, GoogLeNet, ResNet-50
    #     'computing_frequency':2 * (10**12),
    #     'memory':8 * 1024 * 1024 * 1024, # Byte
    #     'max_energy':30,
    #     'cur_energy':30,
    #     'min_energy_consumption':7.5,
    #     'max_energy_consumption':15,
    #     'is_request_device':False,
    # },
]

edge_server_info = [
    {
        'device_name':'Edge Server',
        'computing_intensity':[282, 698, 280, 282, 698, 280, 282, 698, 280, 282, 698, 280, 282, 698, 280], # AlexNet, GoogLeNet, ResNet-50
        'computing_frequency':3.6 * (10**12),
        'memory':24 * 1024 * 1024 * 1024, # Byte
        'max_energy':300,
        'cur_energy':300,
        'min_energy_consumption':80,
        'max_energy_consumption':200,
        'is_request_device':False,
    },
]

cloud_server_info = [
    {
        'device_name':'Cloud Server',
        'computing_intensity':[282, 698, 280, 282, 698, 280, 282, 698, 280, 282, 698, 280, 282, 698, 280], # AlexNet, GoogLeNet, ResNet-50
        'computing_frequency':100 * (10**12),
        'memory':24 * 1024 * 1024 * 1024, # Byte
        'max_energy':300,
        'cur_energy':300,
        'min_energy_consumption':80,
        'max_energy_consumption':200,
        'is_request_device':False,
    },
]

service_info = [
    {
        'model_name':'AlexNet',
        'deadline':0.08, # second
        'layers':[
            {
                'layer_name':'conv1',
                'layer_type':'cnn',
                'input_height':227,
                'input_width':227,
                'input_channel':3,
                'kernel':11,
                'padding':0,
                'stride':4,
                'output_height':55,
                'output_width':55,
                'output_channel':64,
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':[],
                'input_data_size':224*224*3,
                'successors':['maxpool1'],
                'output_data_size':[55*55*64*4],
            },
            {
                'layer_name':'maxpool1',
                'layer_type':'maxpool',
                'input_height':55,
                'input_width':55,
                'input_channel':64,
                'kernel':3,
                'padding':0,
                'stride':2,
                'output_height':27,
                'output_width':27,
                'output_channel':64, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv1'],
                'input_data_size':[55*55*64*4],
                'successors':['conv2'],
                'output_data_size':[27*27*64*4],
            },
            {
                'layer_name':'conv2',
                'layer_type':'cnn',
                'input_height':27,
                'input_width':27,
                'input_channel':64,
                'kernel':5,
                'padding':2,
                'stride':1,
                'output_height':27,
                'output_width':27,
                'output_channel':192, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['maxpool1'],
                'input_data_size':[27*27*64*4],
                'successors':['maxpool2'],
                'output_data_size':[27*27*192*4],
            },
            {
                'layer_name':'maxpool2',
                'layer_type':'maxpool',
                'input_height':27,
                'input_width':27,
                'input_channel':192,
                'kernel':3,
                'padding':0,
                'stride':2,
                'output_height':13,
                'output_width':13,
                'output_channel':192, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv2'],
                'input_data_size':[27*27*192*4],
                'successors':['conv3'],
                'output_data_size':[13*13*192*4],
            },
            {
                'layer_name':'conv3',
                'layer_type':'cnn',
                'input_height':13,
                'input_width':13,
                'input_channel':192,
                'kernel':3,
                'padding':1,
                'stride':1,
                'output_height':13,
                'output_width':13,
                'output_channel':384, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['maxpool2'],
                'input_data_size':[13*13*192*4],
                'successors':['conv4'],
                'output_data_size':[13*13*384*4],
            },
            {
                'layer_name':'conv4',
                'layer_type':'cnn',
                'input_height':13,
                'input_width':13,
                'input_channel':384,
                'kernel':3,
                'padding':1,
                'stride':1,
                'output_height':13,
                'output_width':13,
                'output_channel':256, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv3'],
                'input_data_size':[13*13*384*4],
                'successors':['conv5'],
                'output_data_size':[13*13*256*4],
            },
            {
                'layer_name':'conv5',
                'layer_type':'cnn',
                'input_height':13,
                'input_width':13,
                'input_channel':256,
                'kernel':3,
                'padding':1,
                'stride':1,
                'output_height':13,
                'output_width':13,
                'output_channel':256, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv4'],
                'input_data_size':[13*13*256*4],
                'successors':['maxpool3'],
                'output_data_size':[13*13*256*4],
            },
            {
                'layer_name':'maxpool3',
                'layer_type':'maxpool',
                'input_height':13,
                'input_width':13,
                'input_channel':256,
                'kernel':3,
                'padding':0,
                'stride':2,
                'output_height':6,
                'output_width':6,
                'output_channel':256, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv5'],
                'input_data_size':[13*13*256*4],
                'successors':['fc1'],
                'output_data_size':[6*6*256*4],
            },
            {
                'layer_name':'fc1',
                'layer_type':'fc',
                'is_first_fc':True,
                'input_height':6,
                'input_width':6,
                'input_channel':256,
                'output_height':1,
                'output_width':1,
                'output_channel':4096, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['maxpool3'],
                'input_data_size':[6*6*256*4],
                'successors':['fc2'],
                'output_data_size':[4096*4],
            },
            {
                'layer_name':'fc2',
                'layer_type':'fc',
                'is_first_fc':False,
                'input_height':1,
                'input_width':1,
                'input_channel':4096,
                'output_height':1,
                'output_width':1,
                'output_channel':4096, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['fc1'],
                'input_data_size':[4096*4],
                'successors':['fc3'],
                'output_data_size':[4096*4],
            },
            {
                'layer_name':'fc3',
                'layer_type':'fc',
                'is_first_fc':False,
                'input_height':1,
                'input_width':1,
                'input_channel':4096,
                'output_height':1,
                'output_width':1,
                'output_channel':1000, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['fc2'],
                'input_data_size':[4096*4],
                'successors':[],
                'output_data_size':1000*4,
            },
        ]
    },
    {
        'model_name':'AlexNet',
        'deadline':0.08, # second
        'layers':[
            {
                'layer_name':'conv1',
                'layer_type':'cnn',
                'input_height':227,
                'input_width':227,
                'input_channel':3,
                'kernel':11,
                'padding':0,
                'stride':4,
                'output_height':55,
                'output_width':55,
                'output_channel':64,
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':[],
                'input_data_size':224*224*3,
                'successors':['maxpool1'],
                'output_data_size':[55*55*64*4],
            },
            {
                'layer_name':'maxpool1',
                'layer_type':'maxpool',
                'input_height':55,
                'input_width':55,
                'input_channel':64,
                'kernel':3,
                'padding':0,
                'stride':2,
                'output_height':27,
                'output_width':27,
                'output_channel':64, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv1'],
                'input_data_size':[55*55*64*4],
                'successors':['conv2'],
                'output_data_size':[27*27*64*4],
            },
            {
                'layer_name':'conv2',
                'layer_type':'cnn',
                'input_height':27,
                'input_width':27,
                'input_channel':64,
                'kernel':5,
                'padding':2,
                'stride':1,
                'output_height':27,
                'output_width':27,
                'output_channel':192, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['maxpool1'],
                'input_data_size':[27*27*64*4],
                'successors':['maxpool2'],
                'output_data_size':[27*27*192*4],
            },
            {
                'layer_name':'maxpool2',
                'layer_type':'maxpool',
                'input_height':27,
                'input_width':27,
                'input_channel':192,
                'kernel':3,
                'padding':0,
                'stride':2,
                'output_height':13,
                'output_width':13,
                'output_channel':192, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv2'],
                'input_data_size':[27*27*192*4],
                'successors':['conv3'],
                'output_data_size':[13*13*192*4],
            },
            {
                'layer_name':'conv3',
                'layer_type':'cnn',
                'input_height':13,
                'input_width':13,
                'input_channel':192,
                'kernel':3,
                'padding':1,
                'stride':1,
                'output_height':13,
                'output_width':13,
                'output_channel':384, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['maxpool2'],
                'input_data_size':[13*13*192*4],
                'successors':['conv4'],
                'output_data_size':[13*13*384*4],
            },
            {
                'layer_name':'conv4',
                'layer_type':'cnn',
                'input_height':13,
                'input_width':13,
                'input_channel':384,
                'kernel':3,
                'padding':1,
                'stride':1,
                'output_height':13,
                'output_width':13,
                'output_channel':256, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv3'],
                'input_data_size':[13*13*384*4],
                'successors':['conv5'],
                'output_data_size':[13*13*256*4],
            },
            {
                'layer_name':'conv5',
                'layer_type':'cnn',
                'input_height':13,
                'input_width':13,
                'input_channel':256,
                'kernel':3,
                'padding':1,
                'stride':1,
                'output_height':13,
                'output_width':13,
                'output_channel':256, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv4'],
                'input_data_size':[13*13*256*4],
                'successors':['maxpool3'],
                'output_data_size':[13*13*256*4],
            },
            {
                'layer_name':'maxpool3',
                'layer_type':'maxpool',
                'input_height':13,
                'input_width':13,
                'input_channel':256,
                'kernel':3,
                'padding':0,
                'stride':2,
                'output_height':6,
                'output_width':6,
                'output_channel':256, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv5'],
                'input_data_size':[13*13*256*4],
                'successors':['fc1'],
                'output_data_size':[6*6*256*4],
            },
            {
                'layer_name':'fc1',
                'layer_type':'fc',
                'is_first_fc':True,
                'input_height':6,
                'input_width':6,
                'input_channel':256,
                'output_height':1,
                'output_width':1,
                'output_channel':4096, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['maxpool3'],
                'input_data_size':[6*6*256*4],
                'successors':['fc2'],
                'output_data_size':[4096*4],
            },
            {
                'layer_name':'fc2',
                'layer_type':'fc',
                'is_first_fc':False,
                'input_height':1,
                'input_width':1,
                'input_channel':4096,
                'output_height':1,
                'output_width':1,
                'output_channel':4096, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['fc1'],
                'input_data_size':[4096*4],
                'successors':['fc3'],
                'output_data_size':[4096*4],
            },
            {
                'layer_name':'fc3',
                'layer_type':'fc',
                'is_first_fc':False,
                'input_height':1,
                'input_width':1,
                'input_channel':4096,
                'output_height':1,
                'output_width':1,
                'output_channel':1000, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['fc2'],
                'input_data_size':[4096*4],
                'successors':[],
                'output_data_size':1000*4,
            },
        ]
    },
    {
        'model_name':'AlexNet',
        'deadline':0.08, # second
        'layers':[
            {
                'layer_name':'conv1',
                'layer_type':'cnn',
                'input_height':227,
                'input_width':227,
                'input_channel':3,
                'kernel':11,
                'padding':0,
                'stride':4,
                'output_height':55,
                'output_width':55,
                'output_channel':64,
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':[],
                'input_data_size':224*224*3,
                'successors':['maxpool1'],
                'output_data_size':[55*55*64*4],
            },
            {
                'layer_name':'maxpool1',
                'layer_type':'maxpool',
                'input_height':55,
                'input_width':55,
                'input_channel':64,
                'kernel':3,
                'padding':0,
                'stride':2,
                'output_height':27,
                'output_width':27,
                'output_channel':64, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv1'],
                'input_data_size':[55*55*64*4],
                'successors':['conv2'],
                'output_data_size':[27*27*64*4],
            },
            {
                'layer_name':'conv2',
                'layer_type':'cnn',
                'input_height':27,
                'input_width':27,
                'input_channel':64,
                'kernel':5,
                'padding':2,
                'stride':1,
                'output_height':27,
                'output_width':27,
                'output_channel':192, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['maxpool1'],
                'input_data_size':[27*27*64*4],
                'successors':['maxpool2'],
                'output_data_size':[27*27*192*4],
            },
            {
                'layer_name':'maxpool2',
                'layer_type':'maxpool',
                'input_height':27,
                'input_width':27,
                'input_channel':192,
                'kernel':3,
                'padding':0,
                'stride':2,
                'output_height':13,
                'output_width':13,
                'output_channel':192, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv2'],
                'input_data_size':[27*27*192*4],
                'successors':['conv3'],
                'output_data_size':[13*13*192*4],
            },
            {
                'layer_name':'conv3',
                'layer_type':'cnn',
                'input_height':13,
                'input_width':13,
                'input_channel':192,
                'kernel':3,
                'padding':1,
                'stride':1,
                'output_height':13,
                'output_width':13,
                'output_channel':384, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['maxpool2'],
                'input_data_size':[13*13*192*4],
                'successors':['conv4'],
                'output_data_size':[13*13*384*4],
            },
            {
                'layer_name':'conv4',
                'layer_type':'cnn',
                'input_height':13,
                'input_width':13,
                'input_channel':384,
                'kernel':3,
                'padding':1,
                'stride':1,
                'output_height':13,
                'output_width':13,
                'output_channel':256, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv3'],
                'input_data_size':[13*13*384*4],
                'successors':['conv5'],
                'output_data_size':[13*13*256*4],
            },
            {
                'layer_name':'conv5',
                'layer_type':'cnn',
                'input_height':13,
                'input_width':13,
                'input_channel':256,
                'kernel':3,
                'padding':1,
                'stride':1,
                'output_height':13,
                'output_width':13,
                'output_channel':256, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv4'],
                'input_data_size':[13*13*256*4],
                'successors':['maxpool3'],
                'output_data_size':[13*13*256*4],
            },
            {
                'layer_name':'maxpool3',
                'layer_type':'maxpool',
                'input_height':13,
                'input_width':13,
                'input_channel':256,
                'kernel':3,
                'padding':0,
                'stride':2,
                'output_height':6,
                'output_width':6,
                'output_channel':256, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv5'],
                'input_data_size':[13*13*256*4],
                'successors':['fc1'],
                'output_data_size':[6*6*256*4],
            },
            {
                'layer_name':'fc1',
                'layer_type':'fc',
                'is_first_fc':True,
                'input_height':6,
                'input_width':6,
                'input_channel':256,
                'output_height':1,
                'output_width':1,
                'output_channel':4096, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['maxpool3'],
                'input_data_size':[6*6*256*4],
                'successors':['fc2'],
                'output_data_size':[4096*4],
            },
            {
                'layer_name':'fc2',
                'layer_type':'fc',
                'is_first_fc':False,
                'input_height':1,
                'input_width':1,
                'input_channel':4096,
                'output_height':1,
                'output_width':1,
                'output_channel':4096, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['fc1'],
                'input_data_size':[4096*4],
                'successors':['fc3'],
                'output_data_size':[4096*4],
            },
            {
                'layer_name':'fc3',
                'layer_type':'fc',
                'is_first_fc':False,
                'input_height':1,
                'input_width':1,
                'input_channel':4096,
                'output_height':1,
                'output_width':1,
                'output_channel':1000, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['fc2'],
                'input_data_size':[4096*4],
                'successors':[],
                'output_data_size':1000*4,
            },
        ]
    },
    {
        'model_name':'AlexNet',
        'deadline':0.08, # second
        'layers':[
            {
                'layer_name':'conv1',
                'layer_type':'cnn',
                'input_height':227,
                'input_width':227,
                'input_channel':3,
                'kernel':11,
                'padding':0,
                'stride':4,
                'output_height':55,
                'output_width':55,
                'output_channel':64,
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':[],
                'input_data_size':224*224*3,
                'successors':['maxpool1'],
                'output_data_size':[55*55*64*4],
            },
            {
                'layer_name':'maxpool1',
                'layer_type':'maxpool',
                'input_height':55,
                'input_width':55,
                'input_channel':64,
                'kernel':3,
                'padding':0,
                'stride':2,
                'output_height':27,
                'output_width':27,
                'output_channel':64, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv1'],
                'input_data_size':[55*55*64*4],
                'successors':['conv2'],
                'output_data_size':[27*27*64*4],
            },
            {
                'layer_name':'conv2',
                'layer_type':'cnn',
                'input_height':27,
                'input_width':27,
                'input_channel':64,
                'kernel':5,
                'padding':2,
                'stride':1,
                'output_height':27,
                'output_width':27,
                'output_channel':192, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['maxpool1'],
                'input_data_size':[27*27*64*4],
                'successors':['maxpool2'],
                'output_data_size':[27*27*192*4],
            },
            {
                'layer_name':'maxpool2',
                'layer_type':'maxpool',
                'input_height':27,
                'input_width':27,
                'input_channel':192,
                'kernel':3,
                'padding':0,
                'stride':2,
                'output_height':13,
                'output_width':13,
                'output_channel':192, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv2'],
                'input_data_size':[27*27*192*4],
                'successors':['conv3'],
                'output_data_size':[13*13*192*4],
            },
            {
                'layer_name':'conv3',
                'layer_type':'cnn',
                'input_height':13,
                'input_width':13,
                'input_channel':192,
                'kernel':3,
                'padding':1,
                'stride':1,
                'output_height':13,
                'output_width':13,
                'output_channel':384, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['maxpool2'],
                'input_data_size':[13*13*192*4],
                'successors':['conv4'],
                'output_data_size':[13*13*384*4],
            },
            {
                'layer_name':'conv4',
                'layer_type':'cnn',
                'input_height':13,
                'input_width':13,
                'input_channel':384,
                'kernel':3,
                'padding':1,
                'stride':1,
                'output_height':13,
                'output_width':13,
                'output_channel':256, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv3'],
                'input_data_size':[13*13*384*4],
                'successors':['conv5'],
                'output_data_size':[13*13*256*4],
            },
            {
                'layer_name':'conv5',
                'layer_type':'cnn',
                'input_height':13,
                'input_width':13,
                'input_channel':256,
                'kernel':3,
                'padding':1,
                'stride':1,
                'output_height':13,
                'output_width':13,
                'output_channel':256, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv4'],
                'input_data_size':[13*13*256*4],
                'successors':['maxpool3'],
                'output_data_size':[13*13*256*4],
            },
            {
                'layer_name':'maxpool3',
                'layer_type':'maxpool',
                'input_height':13,
                'input_width':13,
                'input_channel':256,
                'kernel':3,
                'padding':0,
                'stride':2,
                'output_height':6,
                'output_width':6,
                'output_channel':256, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['conv5'],
                'input_data_size':[13*13*256*4],
                'successors':['fc1'],
                'output_data_size':[6*6*256*4],
            },
            {
                'layer_name':'fc1',
                'layer_type':'fc',
                'is_first_fc':True,
                'input_height':6,
                'input_width':6,
                'input_channel':256,
                'output_height':1,
                'output_width':1,
                'output_channel':4096, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['maxpool3'],
                'input_data_size':[6*6*256*4],
                'successors':['fc2'],
                'output_data_size':[4096*4],
            },
            {
                'layer_name':'fc2',
                'layer_type':'fc',
                'is_first_fc':False,
                'input_height':1,
                'input_width':1,
                'input_channel':4096,
                'output_height':1,
                'output_width':1,
                'output_channel':4096, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['fc1'],
                'input_data_size':[4096*4],
                'successors':['fc3'],
                'output_data_size':[4096*4],
            },
            {
                'layer_name':'fc3',
                'layer_type':'fc',
                'is_first_fc':False,
                'input_height':1,
                'input_width':1,
                'input_channel':4096,
                'output_height':1,
                'output_width':1,
                'output_channel':1000, 
                'workload_size':1.5, # 0.76,
                'memory':(1.173+random.uniform(0.,0.276))*1024*1024*1024,
                'predecessors':['fc2'],
                'input_data_size':[4096*4],
                'successors':[],
                'output_data_size':1000*4,
            },
        ]
    },
]